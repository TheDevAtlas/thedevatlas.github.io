---
import Layout from "../layouts/Layout.astro";

const entries = [
  {
    title: "RPG Combat Deep Dive",
    description:
      "Workshop: architect responsive combat loops, designer tooling, and encounter pacing for action RPGs.",
    category: "Workshops",
    tags: ["combat", "systems", "cloop"],
    href: "/contact",
    action: "Reserve a seat",
  },
  {
    title: "Movement & Parkour Physics",
    description:
      "Workshop: prototype traversal mechanics, wall-runs, mantles, and kinesthetic animation blends.",
    category: "Workshops",
    tags: ["movement", "physics"],
    href: "/contact",
    action: "Reserve a seat",
  },
  {
    title: "Cloop Dev Notebook",
    description:
      "Article series: production notes, prototyping experiments, and release checkpoints for Cloop.",
    category: "Cloop",
    tags: ["cloop", "production", "devlog"],
    href: "/collections/cloop",
    action: "View collection",
  },
  {
    title: "Toolbox Cache",
    description:
      "Collection: systems thinking, workflow automation, and game-adjacent tooling experiments.",
    category: "Cache",
    tags: ["tools", "pipeline", "productivity"],
    href: "/collections/cache",
    action: "Open cache",
  },
  {
    title: "AI Behavior Trees Field Guide",
    description:
      "Article: debugging nodes, authoring utilities, and building reusable AI behavior libraries.",
    category: "Dev Tools",
    tags: ["ai", "tools", "behavior"],
    href: "/collections/dev-tools",
    action: "Read breakdown",
  },
  {
    title: "Machine Learning Experiments",
    description:
      "Notes: using ML models for procedural content, generative art, and playtesting insights.",
    category: "Machine Learning",
    tags: ["machine learning", "experiments"],
    href: "/collections/machine-learning",
    action: "Explore experiments",
  },
];
---

<Layout title="Workshop Library | TheDevAtlas" description="Search every workshop, article, and resource curated by TheDevAtlas.">
  <main class="search-page">
    <section class="search-hero">
      <p class="eyebrow">Workshop · Articles · Tools</p>
      <h1>Search all TheDevAtlas guides and sessions.</h1>
      <p class="intro">
        Filter across workshops, devlogs, and tooling writeups. Use the directory to surface the resources that unlock your next milestone.
      </p>
      <div class="search-box" role="search">
        <label for="entrySearch" class="sr-only">Search content</label>
        <input id="entrySearch" type="search" placeholder="Search by title, tag, collection, or focus" autocomplete="off" />
      </div>
    </section>

    <section class="results" aria-live="polite">
      {entries.map((entry) => (
        <article class="entry-card" data-search={(entry.title + " " + entry.description + " " + entry.category + " " + entry.tags.join(" ")).toLowerCase()}>
          <header>
            <div>
              <p class="category">{entry.category}</p>
              <h2>{entry.title}</h2>
            </div>
          </header>
          <p>{entry.description}</p>
          <ul class="tag-list">
            {entry.tags.map((tag) => (
              <li>{tag}</li>
            ))}
          </ul>
          <a class="cta" href={entry.href}>{entry.action}</a>
        </article>
      ))}
      <p class="empty-state" hidden>No results match your search right now. Try a different keyword.</p>
    </section>
  </main>

  <script type="module">
    const input = document.querySelector('#entrySearch');
    const cards = Array.from(document.querySelectorAll('.entry-card'));
    const emptyState = document.querySelector('.empty-state');

    const filter = (value) => {
      const query = value.trim().toLowerCase();
      let visibleCount = 0;

      cards.forEach((card) => {
        const matches = query.length === 0 || card.dataset.search.includes(query);
        card.hidden = !matches;
        if (!card.hidden) {
          visibleCount += 1;
        }
      });

    const showEmpty = query.length > 0 && visibleCount === 0;
    emptyState.hidden = !showEmpty;
    };

    input?.addEventListener('input', (event) => {
      filter(event.target.value);
    });
  </script>
</Layout>

<style>
  .search-page {
    max-width: 1100px;
    margin: 0 auto;
    padding: clamp(4rem, 8vw, 6rem) clamp(1.5rem, 4vw, 3.5rem) clamp(6rem, 10vw, 7rem);
    display: flex;
    flex-direction: column;
    gap: clamp(2.5rem, 6vw, 4rem);
  }

  .search-hero {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
    background: rgba(15, 23, 42, 0.74);
    padding: clamp(2.5rem, 6vw, 3.5rem);
    border-radius: 24px;
    border: 1px solid rgba(99, 102, 241, 0.18);
    box-shadow: 0 18px 46px rgba(15, 23, 42, 0.45);
  }

  .eyebrow {
    text-transform: uppercase;
    letter-spacing: 0.32em;
    font-size: 0.75rem;
    font-weight: 600;
    color: rgba(148, 163, 184, 0.78);
  }

  h1 {
    margin: 0;
    font-size: clamp(2.4rem, 4vw, 3.2rem);
    line-height: 1.08;
  }

  .intro {
    max-width: 60ch;
    color: rgba(226, 232, 240, 0.85);
    font-size: 1.05rem;
  }

  .search-box {
    position: relative;
  }

  .search-box input {
    width: 100%;
    padding: 1rem 1.25rem;
    border-radius: 999px;
    border: 1px solid rgba(99, 102, 241, 0.25);
    background: rgba(10, 16, 30, 0.82);
    color: #f8fafc;
    font-size: 1rem;
    transition: border 160ms ease, box-shadow 160ms ease;
  }

  .search-box input:focus {
    outline: none;
    border-color: rgba(56, 189, 248, 0.6);
    box-shadow: 0 0 0 3px rgba(56, 189, 248, 0.25);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }

  .results {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: clamp(1.5rem, 4vw, 2rem);
  }

  .entry-card {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    background: rgba(15, 23, 42, 0.76);
    border: 1px solid rgba(56, 189, 248, 0.15);
    border-radius: 20px;
    padding: clamp(1.75rem, 4vw, 2.3rem);
    box-shadow: 0 16px 42px rgba(15, 23, 42, 0.4);
  }

  .entry-card header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
  }

  .entry-card h2 {
    margin: 0;
    font-size: 1.35rem;
  }

  .category {
    margin: 0;
    text-transform: uppercase;
    letter-spacing: 0.24em;
    font-size: 0.7rem;
    color: rgba(148, 163, 184, 0.75);
    font-weight: 600;
  }

  .entry-card p {
    margin: 0;
    color: rgba(226, 232, 240, 0.82);
    line-height: 1.6;
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tag-list li {
    padding: 0.35rem 0.75rem;
    border-radius: 999px;
    background: rgba(56, 189, 248, 0.12);
    color: rgba(148, 201, 255, 0.85);
    font-size: 0.85rem;
    font-weight: 600;
  }

  .cta {
    margin-top: auto;
    align-self: flex-start;
    color: #38bdf8;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    gap: 0.35rem;
    align-items: center;
  }

  .cta:hover,
  .cta:focus-visible {
    color: #a855f7;
  }

  .empty-state {
    grid-column: 1 / -1;
    text-align: center;
    padding: clamp(1.5rem, 4vw, 2rem);
    border: 1px dashed rgba(99, 102, 241, 0.35);
    border-radius: 18px;
    color: rgba(148, 163, 184, 0.8);
    background: rgba(10, 16, 30, 0.7);
  }

  @media (max-width: 640px) {
    .entry-card {
      padding: clamp(1.5rem, 5vw, 2rem);
    }

    .entry-card header {
      flex-direction: column;
      align-items: flex-start;
    }

    .cta {
      align-self: stretch;
      justify-content: center;
      padding: 0.75rem 1rem;
      border-radius: 999px;
      background: rgba(56, 189, 248, 0.12);
    }
  }
</style>
